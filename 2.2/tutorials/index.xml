<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on MongoDB Node.js Driver</title>
    <link>/node-mongodb-native/2.2/tutorials/</link>
    <description>Recent content in Tutorials on MongoDB Node.js Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jun 2016 12:53:30 -0400</lastBuildDate>
    <atom:link href="/node-mongodb-native/2.2/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Projections</title>
      <link>/node-mongodb-native/2.2/tutorials/projections/</link>
      <pubDate>Wed, 01 Jun 2016 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/projections/</guid>
      <description>

&lt;h1 id=&#34;projections&#34;&gt;Projections&lt;/h1&gt;

&lt;p&gt;By default, queries in MongoDB return all fields in matching
documents. To limit the amount of data that MongoDB sends to
applications, you can include a projection document in the query
operation.&lt;/p&gt;

&lt;h2 id=&#34;projection-document&#34;&gt;Projection Document&lt;/h2&gt;

&lt;p&gt;The projection document limits the fields to return for all
matching documents. The projection document can specify the
inclusion of fields or the exclusion of field and has the
following form:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{ field1: &amp;lt;value&amp;gt;, field2: &amp;lt;value&amp;gt; ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; may be &lt;code&gt;0&lt;/code&gt; (or &lt;code&gt;false&lt;/code&gt;) to exclude the field, or
&lt;code&gt;1&lt;/code&gt; (or &lt;code&gt;true&lt;/code&gt;) to include it. With the exception of the &lt;code&gt;_id&lt;/code&gt;
field, you may not have both inclusions and exclusions in the same
projection document.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;The following code example uses the &lt;code&gt;restaurants&lt;/code&gt; sample dataset.&lt;/p&gt;

&lt;p&gt;To return only the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;cuisine&lt;/code&gt; and &lt;code&gt;_id&lt;/code&gt; fields for documents
which match the query filter, explicitly include the &lt;code&gt;name&lt;/code&gt; and
&lt;code&gt;cuisine&lt;/code&gt; fields in the projection document. The &lt;code&gt;_id&lt;/code&gt; field is
included automatically unless specifically excluded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/test&#39;;
// Use connect method to connect to the server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);

  findDocuments(db, function() {
    db.close();
  });  
});


var findDocuments = function(db, callback) {
  // Get the documents collection
  var collection = db.collection( &#39;restaurants&#39; );
  // Find some documents
  collection.find({ &#39;cuisine&#39; : &#39;Brazilian&#39; }, { &#39;name&#39; : 1, &#39;cuisine&#39; : 1 }).toArray(function(err, docs) {
    assert.equal(err, null);
    console.log(&amp;quot;Found the following records&amp;quot;);
    console.log(docs)
    callback(docs);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To return &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;cuisine&lt;/code&gt; but exclude all other fields,
including &lt;code&gt;_id&lt;/code&gt;, use the following projection document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{ &#39;name&#39; : 1, &#39;cuisine&#39; : 1, &#39;_id&#39;: 0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To return all fields &lt;em&gt;except&lt;/em&gt; the address field, use the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{ &#39;address&#39; : 0 }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GridFS API</title>
      <link>/node-mongodb-native/2.2/tutorials/gridfs/streaming/</link>
      <pubDate>Thu, 15 Oct 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/gridfs/streaming/</guid>
      <description>

&lt;h1 id=&#34;the-gridfs-api&#34;&gt;The GridFS API&lt;/h1&gt;

&lt;p&gt;The MongoDB Node.j6 driver now supports a
&lt;a href=&#34;https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.rst&#34;&gt;stream-based API for GridFS&lt;/a&gt;
that&amp;rsquo;s compatible with Node.js&amp;rsquo;
&lt;a href=&#34;https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/&#34;&gt;streams3&lt;/a&gt;, so you can &lt;code&gt;.pipe()&lt;/code&gt; directly from file streams to MongoDB. In
this tutorial, you&amp;rsquo;ll see how to use the new GridFS streaming API to upload
&lt;a href=&#34;https://musopen.org/music/213/richard-wagner/die-meistersinger-von-nurnberg-overture/&#34;&gt;a CC-licensed 28 MB recording of the overture from Richard Wagner&amp;rsquo;s opera &lt;em&gt;Die Meistersinger von Nurnberg&lt;/em&gt;&lt;/a&gt;
to MongoDB using streams.&lt;/p&gt;

&lt;h2 id=&#34;getting-set-up&#34;&gt;Getting Set Up&lt;/h2&gt;

&lt;p&gt;The new GridFS streaming functionality is part of the 2.1.0 release of the
&lt;a href=&#34;https://www.npmjs.com/package/mongodb&#34;&gt;MongoDB Node.js driver&lt;/a&gt;. To use it,
put the following dependency in your
&lt;code&gt;package.json&lt;/code&gt;. We strongly recommend not using versions from GitHub in
production, but it&amp;rsquo;s fine for experimentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;mongodb&amp;quot;: &amp;quot;https://github.com/mongodb/node-mongodb-native/archive/gridfs-specification.tar.gz&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;uploading-a-file&#34;&gt;Uploading a File&lt;/h2&gt;

&lt;p&gt;You can use GridFS to upload a file to MongoDB. This example
assumes that you have a file named &lt;code&gt;meistersinger.mp3&lt;/code&gt; in the
root directory of your project. You can use whichever file you want, or you
can just download a &lt;a href=&#34;https://musopen.org/music/213/richard-wagner/die-meistersinger-von-nurnberg-overture/&#34;&gt;&lt;em&gt;Die Meistersinger&lt;/em&gt; Overture mp3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to use the streaming GridFS API, you first need to create
a &lt;code&gt;GridFSBucket&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;mongodb.MongoClient.connect(uri, function(error, db) {
  assert.ifError(error);

  var bucket = new mongodb.GridFSBucket(db);

  // Use bucket...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bucket has an
&lt;code&gt;openUploadStream()&lt;/code&gt; method that creates an upload stream for a given
file name. You can pipe a Node.js &lt;code&gt;fs&lt;/code&gt; read stream to the
upload stream.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var assert = require(&#39;assert&#39;);
var fs = require(&#39;fs&#39;);
var mongodb = require(&#39;mongodb&#39;);

var uri = &#39;mongodb://localhost:27017/test&#39;;

mongodb.MongoClient.connect(uri, function(error, db) {
  assert.ifError(error);

  var bucket = new mongodb.GridFSBucket(db);

  fs.createReadStream(&#39;./meistersinger.mp3&#39;).
    pipe(bucket.openUploadStream(&#39;meistersinger.mp3&#39;)).
    on(&#39;error&#39;, function(error) {
      assert.ifError(error);
    }).
    on(&#39;finish&#39;, function() {
      console.log(&#39;done!&#39;);
      process.exit(0);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming that your &lt;code&gt;test&lt;/code&gt; database was empty, you should see that the above
script created 2 collections in your &lt;code&gt;test&lt;/code&gt; database: &lt;code&gt;fs.chunks&lt;/code&gt; and
&lt;code&gt;fs.files&lt;/code&gt;. The &lt;code&gt;fs.files&lt;/code&gt; collection contains high-level metadata about
the files stored in this bucket. For instance, the file you just uploaded
has a document that looks like what you see below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.fs.files.findOne()
{
	&amp;quot;_id&amp;quot; : ObjectId(&amp;quot;561fc381e81346c82d6397bb&amp;quot;),
	&amp;quot;length&amp;quot; : 27847575,
	&amp;quot;chunkSize&amp;quot; : 261120,
	&amp;quot;uploadDate&amp;quot; : ISODate(&amp;quot;2015-10-15T15:17:21.819Z&amp;quot;),
	&amp;quot;md5&amp;quot; : &amp;quot;2459f1cdec4d9af39117c3424326d5e5&amp;quot;,
	&amp;quot;filename&amp;quot; : &amp;quot;meistersinger.mp3&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above document indicates that the file is named &amp;lsquo;meistersinger.mp3&amp;rsquo;, and tells
you its size in bytes, when it was uploaded, and the
&lt;a href=&#34;https://en.wikipedia.org/wiki/MD5&#34;&gt;md5&lt;/a&gt; of the contents. There&amp;rsquo;s also a
&lt;code&gt;chunkSize&lt;/code&gt; field indicating that the file is
broken up into chunks of size 255 kilobytes, which is the
default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.fs.chunks.count()
107
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not surprisingly, &lt;sup&gt;27847575&lt;/sup&gt;&amp;frasl;&lt;sub&gt;261120&lt;/sub&gt; is approximately 106.64, so the &lt;code&gt;fs.chunks&lt;/code&gt;
collection contains 106 chunks with size 255KB and 1 chunk that&amp;rsquo;s roughly
255KB * 0.64. Each individual chunks document is similar to the document below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.fs.chunks.findOne({}, { data: 0 })
{
	&amp;quot;_id&amp;quot; : ObjectId(&amp;quot;561fc381e81346c82d6397bc&amp;quot;),
	&amp;quot;files_id&amp;quot; : ObjectId(&amp;quot;561fc381e81346c82d6397bb&amp;quot;),
	&amp;quot;n&amp;quot; : 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The chunk document keeps track of which file it belongs to and its order in
the list of chunks. The chunk document also has a &lt;code&gt;data&lt;/code&gt; field that contains
the raw bytes of the file.&lt;/p&gt;

&lt;p&gt;You can configure both the chunk size and the &lt;code&gt;fs&lt;/code&gt; prefix for the files and
chunks collections at the bucket level. For instance, if you specify the
&lt;code&gt;chunkSizeBytes&lt;/code&gt; and &lt;code&gt;bucketName&lt;/code&gt; options as shown below, you&amp;rsquo;ll get
27195 chunks in the &lt;code&gt;songs.chunks&lt;/code&gt; collection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var bucket = new mongodb.GridFSBucket(db, {
  chunkSizeBytes: 1024,
  bucketName: &#39;songs&#39;
});

fs.createReadStream(&#39;./meistersinger.mp3&#39;).
  pipe(bucket.openUploadStream(&#39;meistersinger.mp3&#39;)).
  on(&#39;error&#39;, function(error) {
    assert.ifError(error);
  }).
  on(&#39;finish&#39;, function() {
    console.log(&#39;done!&#39;);
    process.exit(0);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;downloading-a-file&#34;&gt;Downloading a File&lt;/h2&gt;

&lt;p&gt;Congratulations, you&amp;rsquo;ve successfully uploaded a file to MongoDB! However,
a file sitting in MongoDB isn&amp;rsquo;t particularly useful. In order to stream the
file to your hard drive, an HTTP response, or to npm modules like
&lt;a href=&#34;https://www.npmjs.com/package/speaker&#34;&gt;speaker&lt;/a&gt;, you&amp;rsquo;re going to need
a download stream. The easiest way to get a download stream is
the &lt;code&gt;openDownloadStreamByName()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var bucket = new mongodb.GridFSBucket(db, {
  chunkSizeBytes: 1024,
  bucketName: &#39;songs&#39;
});

bucket.openDownloadStreamByName(&#39;meistersinger.mp3&#39;).
  pipe(fs.createWriteStream(&#39;./output.mp3&#39;)).
  on(&#39;error&#39;, function(error) {
    assert.ifError(error);
  }).
  on(&#39;finish&#39;, function() {
    console.log(&#39;done!&#39;);
    process.exit(0);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you have an &lt;code&gt;output.mp3&lt;/code&gt; file that&amp;rsquo;s a copy of the original
&lt;code&gt;meistersinger.mp3&lt;/code&gt; file. The download stream also enables you to do some
neat tricks. For instance, you can cut off the beginning of the song by
specifying a number of bytes to skip. You can cut off the first 41 seconds of
the mp3 and skip right to the good part of the song as shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;bucket.openDownloadStreamByName(&#39;meistersinger.mp3&#39;).
  start(1024 * 1585). // &amp;lt;-- skip the first 1585 KB, approximately 41 seconds
  pipe(fs.createWriteStream(&#39;./output.mp3&#39;)).
  on(&#39;error&#39;, function(error) {
    assert.ifError(error);
  }).
  on(&#39;finish&#39;, function() {
    console.log(&#39;done!&#39;);
    process.exit(0);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An important point to be aware of regarding performance is that the GridFS
streaming API can&amp;rsquo;t load partial chunks. When a download stream needs to pull a
chunk from MongoDB, it pulls the entire chunk into memory. The 255 kilobyte default
chunk size is usually sufficient, but you can reduce the chunk size to reduce
memory overhead.&lt;/p&gt;

&lt;h2 id=&#34;moving-on&#34;&gt;Moving On&lt;/h2&gt;

&lt;p&gt;Congratulations, you&amp;rsquo;ve just used MongoDB and Node.js streams to store and
manipulate a .mp3 file. With GridFS, you have a file system with all the
horizontal scalability features of MongoDB. It also has a stream-based
API you can use to &lt;code&gt;pipe()&lt;/code&gt; files to and from MongoDB.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>/node-mongodb-native/2.2/tutorials/gridfs/</link>
      <pubDate>Wed, 05 Aug 2015 12:00:00 +0000</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/gridfs/</guid>
      <description>

&lt;h1 id=&#34;gridfs&#34;&gt;GridFS&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/core/gridfs/&#34;&gt;GridFS&lt;/a&gt; is a specification for storing and
retrieving files that exceed the
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/limits/#limit-bson-document-size&#34;&gt;BSON-document size limit&lt;/a&gt;
of 16 megabytes.&lt;/p&gt;

&lt;p&gt;Instead of storing a file in a single document, GridFS divides a file into parts, or chunks, and stores each of those chunks as a separate document. By default, GridFS limits chunk size to 255 kilobytes. GridFS uses two collections to store files: the &lt;code&gt;chunks&lt;/code&gt; collection which stores the file chunks, and the &lt;code&gt;files&lt;/code&gt;
collection that stores the file metadata.&lt;/p&gt;

&lt;p&gt;When you query a GridFS store for a file, the driver or client will reassemble the chunks as needed. GridFS is useful not only for storing files that exceed 16 megabytes but also for storing any files which you want to access without having to load the entire file into memory.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;For more information about GridFS, see the &lt;a href=&#34;http://docs.mongodb.org/manual/core/gridfs/&#34;&gt;MongoDB GridFS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The Node.js Driver includes the legacy &lt;code&gt;GridStore&lt;/code&gt; API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/gridfs/streaming/&#34;&gt;GridFS API&lt;/a&gt;: documentation on how to use the &lt;code&gt;GridFS&lt;/code&gt; API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/gridfs/gridstore/&#34;&gt;GridStore&lt;/a&gt;: the legacy &lt;code&gt;GridStore&lt;/code&gt; API (driver version 1.4 and earlier).&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/node-mongodb-native/2.2/tutorials/connect/authenticating/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/connect/authenticating/</guid>
      <description>

&lt;h1 id=&#34;authentication&#34;&gt;Authentication&lt;/h1&gt;

&lt;p&gt;The Node.js driver supports all MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/&#34;&gt;authentication mechanisms&lt;/a&gt;, including those only available in the MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/administration/install-enterprise/&#34;&gt;Enterprise Edition&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;default&#34;&gt;DEFAULT&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Starting in MongoDB 3.0, MongoDB changed the default authentication mechanism from &lt;a href=&#34;https://docs.mongodb.org/manual/core/security-mongodb-cr/&#34;&gt;MONGODB-CR&lt;/a&gt; to &lt;a href=&#34;https://docs.mongodb.org/manual/core/security-scram-sha-1/&#34;&gt;SCRAM-SHA-1&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To use the default mechanism, either omit the authentication mechanism specification or specify &lt;code&gt;DEFAULT&lt;/code&gt; as the mechanism in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI ConnectionString&lt;/a&gt;. The driver will attempt to authenticate using the &lt;a href=&#34;https://docs.mongodb.org/manual/core/security-scram-sha-1/&#34;&gt;SCRAM-SHA-1 authentication&lt;/a&gt; method if it is available on the MongoDB server. If the server does not support SCRAM-SHA-1, the driver will authenticate using &lt;a href=&#34;https://docs.mongodb.org/manual/core/security-mongodb-cr/&#34;&gt;MONGODB-CR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Include the name and password and the &lt;a href=&#34;https://docs.mongodb.org/manual/core/security-users/#user-authentication-database&#34;&gt;authentication database&lt;/a&gt; (&lt;code&gt;authSource&lt;/code&gt;) in the connection string.&lt;/p&gt;

&lt;p&gt;In the following example, the connection string specifies the user &lt;code&gt;dave&lt;/code&gt;, password &lt;code&gt;abc123&lt;/code&gt;, authentication mechanism &lt;code&gt;DEFAULT&lt;/code&gt;, and authentication database &lt;code&gt;myproject&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://dave:abc123@localhost:27017?authMechanism=DEFAULT&amp;amp;authSource=myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);

  db.close();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scram-sha-1&#34;&gt;SCRAM-SHA-1&lt;/h2&gt;

&lt;p&gt;To explicitly connect to MongoDB using &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;, specify &lt;code&gt;SCRAM-SHA-1&lt;/code&gt; as the mechanism in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Include the name and password and the &lt;a href=&#34;https://docs.mongodb.org/manual/core/security-users/#user-authentication-database&#34;&gt;authentication database&lt;/a&gt; (&lt;code&gt;authSource&lt;/code&gt;) in the connection string.&lt;/p&gt;

&lt;p&gt;In the following example, the connection string specifies the user &lt;code&gt;dave&lt;/code&gt;, password &lt;code&gt;abc123&lt;/code&gt;, authentication mechanism &lt;code&gt;SCRAM-SHA-1&lt;/code&gt;, and authentication database &lt;code&gt;myproject&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://dave:abc123@localhost:27017?authMechanism=SCRAM-SHA-1&amp;amp;authSource=myprojectdb&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);

  db.close();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mongodb-cr&#34;&gt;MONGODB-CR&lt;/h2&gt;

&lt;p&gt;To explicitly connect to MongoDB using &lt;a href=&#34;https://docs.mongodb.org/manual/core/security-mongodb-cr/&#34;&gt;MONGODB-CR&lt;/a&gt;, specify &lt;code&gt;MONGODB-CR&lt;/code&gt; as the mechanism in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Include the name and password and the &lt;a href=&#34;https://docs.mongodb.org/manual/core/security-users/#user-authentication-database&#34;&gt;authentication database&lt;/a&gt; (&lt;code&gt;authSource&lt;/code&gt;) in the connection string.&lt;/p&gt;

&lt;p&gt;In the following example, the connection string specifies the user &lt;code&gt;dave&lt;/code&gt;, password &lt;code&gt;abc123&lt;/code&gt;, authentication mechanism &lt;code&gt;MONGODB-CR&lt;/code&gt;, and authentication database &lt;code&gt;myproject&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://dave:abc123@localhost:27017?authMechanism=MONGODB-CR&amp;amp;authSource=myprojectdb&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);

  db.close();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;If you have &lt;a href=&#34;https://docs.mongodb.org/manual/release-notes/3.0-scram/&#34;&gt;upgraded the authentication schema&lt;/a&gt; from &lt;code&gt;MONGODB-CR&lt;/code&gt; to &lt;code&gt;SCRAM-SHA-1&lt;/code&gt;, &lt;code&gt;MONGODB-CR&lt;/code&gt; credentials will fail to authenticate.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;x509&#34;&gt;X509&lt;/h2&gt;

&lt;p&gt;With  &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#x-509-certificate-authentication&#34;&gt;X.509&lt;/a&gt; mechanism, MongoDB uses the X.509 certificate presented during SSL negotiation to authenticate a user whose name is derived from the distinguished name of the X.509 certificate.&lt;/p&gt;

&lt;p&gt;X.509 authentication requires the use of SSL connections with certificate validation and is available in MongoDB 2.6 and newer.&lt;/p&gt;

&lt;p&gt;To connect using the X.509 authentication mechanism, specify &lt;code&gt;MONGODB-X509&lt;/code&gt; as the mechanism in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;, &lt;code&gt;ssl=true&lt;/code&gt;, and the username. Use &lt;code&gt;enodeURIComponent&lt;/code&gt; to encode the username string.&lt;/p&gt;

&lt;p&gt;In addition to the connection string, pass to the &lt;code&gt;MongoClient.connect&lt;/code&gt; method a connections options for the &lt;code&gt;server&lt;/code&gt; with  the X.509 certificate and other &lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/connect/ssl/&#34;&gt;TLS/SSL connections&lt;/a&gt; options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  assert = require(&#39;assert&#39;);

// Read the cert and key
var cert = fs.readFileSync(__dirname + &amp;quot;/ssl/x509/client.pem&amp;quot;);
var key = fs.readFileSync(__dirname + &amp;quot;/ssl/x509/client.pem&amp;quot;);

// User name
var userName = encodeURIComponent(&amp;quot;CN=client,OU=kerneluser,O=10Gen,L=New York City,ST=New York,C=US&amp;quot;);

// Connect using X509 authentication
MongoClient.connect(f(&#39;mongodb://%s@server:27017/test?authMechanism=MONGODB-X509&amp;amp;ssl=true&#39;, userName), {
  server: {
      sslKey:key
    , sslCert:cert
    , sslValidate:false
  }
}, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);

  db.close();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on connecting to MongoDB instance, replica set, and sharded cluster with TLS/SSL options, see &lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/connect/ssl/&#34;&gt;TLS/SSL connections options&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information, refer to the MongoDB manual
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user&#34;&gt;X.509 tutorial&lt;/a&gt; for more information about determining the subject name from the certificate.&lt;/p&gt;

&lt;h2 id=&#34;kerberos-gssapi-sspi&#34;&gt;Kerberos (GSSAPI/SSPI)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Kerberos service. The Node.js driver supports Kerberos on UNIX via the MIT Kerberos library and on Windows via the SSPI API.&lt;/p&gt;

&lt;p&gt;To connect using the X.509 authentication mechanism, specify &lt;code&gt;authMechanism=GSSAPI&lt;/code&gt; as the mechanism in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;. Specify the user principal and the service name in the connection string.  Use &lt;code&gt;enodeURIComponent&lt;/code&gt; to encode the user principal string.&lt;/p&gt;

&lt;p&gt;The following example connects to MongoDB using Kerberos for UNIX.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  assert = require(&#39;assert&#39;);

// KDC Server
var server = &amp;quot;kerberos.example.com&amp;quot;;
var principal = &amp;quot;drivers@KERBEROS.EXAMPLE.COM&amp;quot;;
var urlEncodedPrincipal = encodeURIComponent(principal);

// Let&#39;s write the actual connection code
MongoClient.connect(f(&amp;quot;mongodb://%s@%s/kerberos?authMechanism=GSSAPI&amp;amp;gssapiServiceName=mongodb&amp;quot;, urlEncodedPrincipal, server), function(err, db) {
  assert.equal(null, err);

  db.close();
  test.done();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism instead of &lt;code&gt;Kerberos&lt;/code&gt; because technically the driver authenticates via the &lt;a href=&#34;https://tools.ietf.org/html/rfc4752&#34;&gt;GSSAPI&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;ldap-plain&#34;&gt;LDAP (PLAIN)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Lightweight Directory Access Protocol (LDAP) service.&lt;/p&gt;

&lt;p&gt;To connect using the LDAP authentication mechanism, specify &lt;code&gt;authMechanism=PLAIN&lt;/code&gt; as the mechanism in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  assert = require(&#39;assert&#39;);

// LDAP Server
var server = &amp;quot;ldap.example.com&amp;quot;;
var user = &amp;quot;ldap-user&amp;quot;;
var pass = &amp;quot;ldap-password&amp;quot;;

// Url
var url = f(&amp;quot;mongodb://%s:%s@%s/test?authMechanism=PLAIN&amp;amp;maxPoolSize=1&amp;quot;, user, pass, server);

// Let&#39;s write the actual connection code
MongoClient.connect(url, function(err, db) {
  test.equal(null, err);    

  db.close();
  test.done();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;PLAIN&lt;/code&gt; authentication mechanism instead of &lt;code&gt;LDAP&lt;/code&gt; because technically the driver authenticates via the &lt;a href=&#34;https://www.ietf.org/rfc/rfc4616.txt&#34;&gt;PLAIN&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>/node-mongodb-native/2.2/tutorials/collections/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/collections/</guid>
      <description>

&lt;h1 id=&#34;collections&#34;&gt;Collections&lt;/h1&gt;

&lt;p&gt;MongoDB stores documents in collections. If a collection does not
exist, MongoDB creates the collection when you first store data for
that collection.&lt;/p&gt;

&lt;p&gt;You can also explicitly create a collection with various options,
such as setting the maximum size or the documentation validation rules.&lt;/p&gt;

&lt;h2 id=&#34;capped-collection&#34;&gt;Capped Collection&lt;/h2&gt;

&lt;p&gt;Capped collections have maximum size or document counts that prevent
them from growing beyond maximum thresholds. All capped collections must
specify a maximum size and may also specify a maximum document count.
MongoDB removes older documents if a collection reaches the maximum size
limit before it reaches the maximum document count.&lt;/p&gt;

&lt;p&gt;To create a &lt;a href=&#34;https://docs.mongodb.com/manual/core/capped-collections/&#34;&gt;capped collection&lt;/a&gt;,
use the &lt;code&gt;createCollection&lt;/code&gt; method and specify &lt;code&gt;&#39;capped&#39; : true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);
var url = &#39;mongodb://localhost:27017/test&#39;;
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  createCapped(db, function() {
    db.close();
  });
});

var createCapped = function(db, callback) {
  db.createCollection(&amp;quot;myCollection&amp;quot;, { &amp;quot;capped&amp;quot;: true, &amp;quot;size&amp;quot;: 100000, &amp;quot;max&amp;quot;: 5000},
    function(err, results) {
      console.log(&amp;quot;Collection created.&amp;quot;);
      callback();
    }
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;document-validation&#34;&gt;Document Validation&lt;/h2&gt;

&lt;p&gt;Collections with &lt;a href=&#34;https://docs.mongodb.com/manual/core/document-validation/&#34;&gt;validation&lt;/a&gt;
compare each inserted or updated
document against the criteria specified in the validator option.
Depending on the &lt;code&gt;validationLevel&lt;/code&gt; and &lt;code&gt;validationAction&lt;/code&gt;, MongoDB
either returns a warning, or refuses to insert or update the document
if it fails to meet the specified criteria.&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;contacts&lt;/code&gt; collection with a validator
that specifies that inserted or updated documents should match at
least one of three following conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;phone&lt;/code&gt; field is a string&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;email&lt;/code&gt; field matches the regular expression&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;status&lt;/code&gt; field is either &lt;code&gt;Unknown&lt;/code&gt; or &lt;code&gt;Incomplete&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);
var url = &#39;mongodb://localhost:27017/test&#39;;
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  createValidated(db, function() {
    db.close();
  });
});


var createValidated = function(db, callback) {
  db.createCollection(&amp;quot;contacts&amp;quot;, 
	   {
	      &#39;validator&#39;: { &#39;$or&#39;:
	         [
	            { &#39;phone&#39;: { &#39;$type&#39;: &amp;quot;string&amp;quot; } },
	            { &#39;email&#39;: { &#39;$regex&#39;: /@mongodb\.com$/ } },
	            { &#39;status&#39;: { &#39;$in&#39;: [ &amp;quot;Unknown&amp;quot;, &amp;quot;Incomplete&amp;quot; ] } }
	         ]
	      }
	   },	   
    function(err, results) {
      console.log(&amp;quot;Collection created.&amp;quot;);
      callback();
    }
  );
};
  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Database Commands</title>
      <link>/node-mongodb-native/2.2/tutorials/commands/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/commands/</guid>
      <description>

&lt;h1 id=&#34;database-commands&#34;&gt;Database Commands&lt;/h1&gt;

&lt;p&gt;Database commands allow you to perform a wide range of diagnostic and administrative
tasks with the Node.js driver. For example, the
&lt;a href=&#34;https://docs.mongodb.org/manual/reference/command/dbStats/&#34;&gt;dbStats&lt;/a&gt; command returns
storage statistics for a given database. Use the &lt;code&gt;command&lt;/code&gt; function to access
database commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// set up a command function
var getDbStats = function(db, callback) {
      db.command({&#39;dbStats&#39;: 1},
      function(err, results) {
        console.log(results);
        callback();
    }
  );
};

// use the function
var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/test&#39;;
// Use connect method to connect to the server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);
  getDbStats(db, function() {
    db.close();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a complete list of database commands, see the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/command/&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geospatial Search</title>
      <link>/node-mongodb-native/2.2/tutorials/geospatial-search/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/geospatial-search/</guid>
      <description>

&lt;h1 id=&#34;geospatial-search&#34;&gt;Geospatial Search&lt;/h1&gt;

&lt;p&gt;You can query against &lt;a href=&#34;https://docs.mongodb.org/manual/applications/geospatial-indexes/&#34;&gt;geospatial indexes&lt;/a&gt;
in several ways via the Node.js driver, using &lt;a href=&#34;https://docs.mongodb.org/manual/reference/operator/query-geospatial/&#34;&gt;geospatial query operators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create a 2dsphere index on a collection, pass a document containing the name of the
field to be indexed with the value &amp;lsquo;2dsphere&amp;rsquo; to the &lt;code&gt;createIndex()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var create2dSphereIndex = function(db, callback) {
  // Get the restaurants collection
  var collection = db.collection(&#39;restaurants&#39;);
  // Create the index
  collection.createIndex(
    { &#39;address.coord&#39; : &amp;quot;2dsphere&amp;quot; }, function(err, result) {
    console.log(result);
    callback(result);
  });
};

// use the create2dSphereIndex function
var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/test&#39;;
// Use connect method to connect to the server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);
  create2dSphereIndex(db, function() {
    db.close();
  });
});


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following examples assume that a database called &lt;code&gt;test&lt;/code&gt; has a
collection called &lt;code&gt;restaurants&lt;/code&gt;, with a &lt;a href=&#34;https://docs.mongodb.org/manual/core/2dsphere/&#34;&gt;2d sphere index&lt;/a&gt;
index on the &lt;code&gt;address.coord&lt;/code&gt; field. A
&lt;a href=&#34;https://docs.mongodb.org/getting-started/node/import-data/&#34;&gt;sample dataset&lt;/a&gt; is available for download.&lt;/p&gt;

&lt;h2 id=&#34;near&#34;&gt;$near&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.mongodb.org/manual/reference/operator/query/near/&#34;&gt;$near&lt;/a&gt; operator specifies
a set of longitude-latitude coordinates and returns documents from nearest to farthest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var findDocuments = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;restaurants&#39;);
  // Find some documents
  collection.find(
	{ &#39;address.coord&#39;:
	  { $near :
	    { $geometry:
	      { type: &amp;quot;Point&amp;quot;,  coordinates: [ -73.9667, 40.78 ] },
	        $maxDistance: 1000
	    }
	  }
	}
  ).toArray(function(err, docs) {
    assert.equal(err, null);
    console.log(&amp;quot;Found the following records&amp;quot;);
    console.log(docs);
    callback(docs);
  });      
}

// use the findDocuments() function
var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/test&#39;;
// Use connect method to connect to the server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);
  findDocuments(db, function() {
    db.close();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;$maxDistance&lt;/code&gt; option specifies a maximum distance (in meters) from the given
coordinates. For a complete list of &lt;code&gt;$near&lt;/code&gt; options, see the
&lt;a href=&#34;https://docs.mongodb.org/manual/reference/operator/query/near/&#34;&gt;MongoDB manual&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;geowithin&#34;&gt;$geoWithin&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.mongodb.org/manual/reference/operator/query/geoWithin/&#34;&gt;$geoWithin&lt;/a&gt; operator
selects documents with geospatial data that exist within a specified shape.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var findDocuments = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;restaurants&#39;);
  // Find some documents
  collection.find(
    { &#39;address.coord&#39;:
      { $geoWithin:
 	   { $geometry:
 	     { type : &amp;quot;Polygon&amp;quot; ,
            coordinates: [ [ [ -73, 40 ], [ -74, 41 ], [ -72, 39 ], [ -73, 40 ] ] ]
          }
        }
      }
    }
  ).toArray(function(err, docs) {
    assert.equal(err, null);
    console.log(&amp;quot;Found the following records&amp;quot;);
    console.log(docs);
    callback(docs);
  });      
}

// use the findDocuments() function
var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/test&#39;;
// Use connect method to connect to the server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);
  findDocuments(db, function() {
    db.close();
  });
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Legacy GridStore</title>
      <link>/node-mongodb-native/2.2/tutorials/gridfs/gridstore/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/gridfs/gridstore/</guid>
      <description>

&lt;p&gt;&lt;div class=&#34;admonition warning&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The GridStore API is deprecated. Driver version 2.0 and later uses the
&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/gridfs/streaming/&#34;&gt;GridFS API&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;gridstore&#34;&gt;GridStore&lt;/h1&gt;

&lt;p&gt;GridStore is a single file inside GridFS that can be managed by the script.&lt;/p&gt;

&lt;h2 id=&#34;open-a-gridfs-file&#34;&gt;Open a GridFS file&lt;/h2&gt;

&lt;p&gt;Opening a GridStore is similar to opening a database. First you create a GridStore object, then &lt;code&gt;open&lt;/code&gt; it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var gs = new GridStore(db, filename, mode[, options])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; is the database object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filename&lt;/code&gt; is the name of the file in GridFS that needs to be accessed/created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; indicates the operation, can be one of:

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;r&amp;rdquo; (Read): Looks for the file information in fs.files collection, or creates a new id for this object.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;w&amp;rdquo; (Write): Erases all chunks if the file already exist.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; can be used to specify metadata for the file, such as &lt;code&gt;content_type&lt;/code&gt;, &lt;code&gt;metadata&lt;/code&gt; and &lt;code&gt;chunk_size&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var gs = new GridStore(db, &amp;quot;test.png&amp;quot;, &amp;quot;w&amp;quot;, {
  &amp;quot;content_type&amp;quot;: &amp;quot;image/png&amp;quot;,
  &amp;quot;metadata&amp;quot;:{
      &amp;quot;author&amp;quot;: &amp;quot;Daniel&amp;quot;
  },
  &amp;quot;chunk_size&amp;quot;: 1024*4
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a GridStore object is created, it can be opened.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gs.open(function(err, gs) {
  // gs is the intialized GridStore object
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opened GridStore objects have a set of useful exposed properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gs.length&lt;/code&gt; - length of the file in bytes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gs.contentType&lt;/code&gt; - the content type for the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gs.uploadDate&lt;/code&gt; - when the file was uploaded&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gs.metadata&lt;/code&gt; - metadata that was saved with the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gs.chunkSize&lt;/code&gt; - chunk size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gs.open(function(err, gs){
  console.log(&amp;quot;this file was uploaded at &amp;quot;+gs.uploadDate);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;writing-to-gridfs&#34;&gt;Writing to GridFS&lt;/h2&gt;

&lt;p&gt;Write to the GridStore object with the &lt;code&gt;write&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gs.write(data, callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; or a string. Callback gets two parameters - an error object (if an error occured) and a
result value which indicates if the write was successful or not.&lt;/p&gt;

&lt;p&gt;While the GridStore is not closed, every write is appended to the opened GridStore.&lt;/p&gt;

&lt;h2 id=&#34;writing-a-file-to-gridfs&#34;&gt;Writing a file to GridFS&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;writeFile&lt;/code&gt; function opens the GridStore, streams the contents of the file into GridStore, and closes the GridStore.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gs.writeFile( file, callback )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; is a file descriptor, or a string file path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback&lt;/code&gt; is a function with two parameters - an error object (if an error occured) and the GridStore object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reading-from-a-gridfs-file&#34;&gt;Reading from a GridFS file&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;read&lt;/code&gt; function to read from a GridStore object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gs.read([size], callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; is the length of the data to be read&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback&lt;/code&gt; is a callback function with two parameters - an error object (if an error occured) and data (binary string)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;streaming-from-gridfs&#34;&gt;Streaming from GridFS&lt;/h2&gt;

&lt;p&gt;You can stream data as it comes from the database using &lt;code&gt;stream&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gs.stream()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function returns a &lt;a href=&#34;http://nodejs.org/docs/v0.4.12/api/streams.html#readable_Stream&#34;&gt;read stream&lt;/a&gt; based on this GridStore file. It supports the events &amp;lsquo;read&amp;rsquo;, &amp;lsquo;error&amp;rsquo;, &amp;lsquo;close&amp;rsquo; and &amp;lsquo;end&amp;rsquo;.&lt;/p&gt;

&lt;h2 id=&#34;delete-a-gridfs-file&#34;&gt;Delete a GridFS file&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;unlink&lt;/code&gt; function to delete GridStore files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;GridStore.unlink(db, name, callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; is the database object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is either the name of a GridStore object or an array of GridStore object names&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback&lt;/code&gt; is the callback function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;closing-a-gridfs-file&#34;&gt;Closing a GridFS file&lt;/h2&gt;

&lt;p&gt;GridStore needs to be closed after usage. Use the &lt;code&gt;close&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gs.close(callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;check-if-a-gridfs-file-exists&#34;&gt;Check if a GridFS file exists&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;exist&lt;/code&gt; function to check if a file exists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;GridStore.exist(db, filename, callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; is the database object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filename&lt;/code&gt; is the name of the file to be checked or a regular expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback&lt;/code&gt; is a callback function with two parameters - an error object (if an error occured) and a boolean value indicating if the file exists or not&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;seek-to-a-specific-position-for-reading&#34;&gt;Seek to a specific position for reading&lt;/h2&gt;

&lt;p&gt;Seeking within a file can be done with &lt;code&gt;seek&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gs.seek(position);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function moves the internal pointer to the specified position.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Text Search</title>
      <link>/node-mongodb-native/2.2/tutorials/text-search/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/text-search/</guid>
      <description>

&lt;h1 id=&#34;text-search&#34;&gt;Text Search&lt;/h1&gt;

&lt;p&gt;Use the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/operator/query/text/&#34;&gt;$text&lt;/a&gt;
operator to perform text searches on fields which have a
&lt;a href=&#34;https://docs.mongodb.org/manual/core/index-text/&#34;&gt;text index&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create a text index on a collection, pass a document containing
the name of the field to be indexed with the value &amp;lsquo;text&amp;rsquo; to the
&lt;code&gt;createIndex()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var createTextIndex = function(db, callback) {
  // Get the restaurants collection
  var collection = db.collection(&#39;restaurants&#39;);
  // Create the index
  collection.createIndex(
    { name : &amp;quot;text&amp;quot; }, function(err, result) {
    console.log(result);
    callback(result);
  });
};

// use the createTextIndex function
var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/test&#39;;
// Use connect method to connect to the server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);
  createTextIndex(db, function() {
    db.close();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following example assumes that a database called &lt;code&gt;test&lt;/code&gt; has a
collection called &lt;code&gt;restaurants&lt;/code&gt;, with a text index on the &lt;code&gt;name&lt;/code&gt; field.
A &lt;a href=&#34;https://docs.mongodb.org/getting-started/node/import-data/&#34;&gt;sample dataset&lt;/a&gt;
is available for download.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var findDocuments = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;restaurants&#39;);
  // Find some documents
  collection.find({ &#39;$text&#39;: {&#39;$search&#39; : &#39;Garden&#39; } } ).toArray(function(err, docs) {
    assert.equal(err, null);
    console.log(&amp;quot;Found the following records&amp;quot;);
    console.log(docs);
    callback(docs);
  });      
}

// use the findDocuments() function
var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/test&#39;;
// Use connect method to connect to the server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);
  findDocuments(db, function() {
    db.close();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about the &lt;code&gt;$text&lt;/code&gt; operator and its options, see the
&lt;a href=&#34;https://docs.mongodb.org/manual/reference/operator/query/text/&#34;&gt;manual entry&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/node-mongodb-native/2.2/tutorials/crud/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/crud/</guid>
      <description>

&lt;h1 id=&#34;crud-operations&#34;&gt;CRUD Operations&lt;/h1&gt;

&lt;p&gt;For a walkthrough of the main CRUD operations please refer to the
&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/quick-start/&#34;&gt;Quick Start guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Driver CRUD operations are defined as the operations performed to create, read, update, and delete documents.
This tutorial covers both the basic CRUD methods and the specialized &lt;code&gt;findAndModify&lt;/code&gt; based methods
as well as the new Bulk API methods for efficient bulk write operations.&lt;/p&gt;

&lt;div class=&#34;pull-right&#34;&gt;
  &lt;input type=&#34;checkbox&#34; checked=&#34;&#34; class=&#34;distroPicker&#34; data-toggle=&#34;toggle&#34; data-on=&#34;JavaScript 5&#34; data-off=&#34;JavaScript 6&#34; data-offstyle=&#34;success&#34;&gt;
&lt;/div&gt;

&lt;h2 id=&#34;write-methods&#34;&gt;Write Methods&lt;/h2&gt;

&lt;p&gt;Write methods are divided into those which insert documents into a collection, those which update
documents in a collection, and those which remove documents from a collection.&lt;/p&gt;

&lt;h3 id=&#34;insert-documents&#34;&gt;Insert Documents&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;insertOne&lt;/code&gt; and &lt;code&gt;insertMany&lt;/code&gt; methods exist on the &lt;code&gt;Collection&lt;/code&gt; class and are used to insert documents into MongoDB.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  // Insert a single document
  db.collection(&#39;inserts&#39;).insertOne({a:1}, function(err, r) {
    assert.equal(null, err);
    assert.equal(1, r.insertedCount);

    // Insert multiple documents
    db.collection(&#39;inserts&#39;).insertMany([{a:2}, {a:3}], function(err, r) {
      assert.equal(null, err);
      assert.equal(2, r.insertedCount);

      db.close();
    });
  });
});

&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Insert a single document
  var r = yield db.collection(&#39;inserts&#39;).insertOne({a:1});
  assert.equal(1, r.insertedCount);

  // Insert multiple documents
  var r = yield db.collection(&#39;inserts&#39;).insertMany([{a:2}, {a:3}]);
  assert.equal(2, r.insertedCount);

  // Close connection
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;The first &lt;code&gt;insert&lt;/code&gt; inserts a single document into the &lt;em&gt;inserts&lt;/em&gt; collection. Notice that there&amp;rsquo;s no need to
explicitly create a new &lt;em&gt;inserts&lt;/em&gt; collection, as the server will create it implicitly when the first document
is inserted. The method &lt;code&gt;db.createIndex&lt;/code&gt; is only necessary when creating non-standard collections,
such as &lt;a href=&#34;https://docs.mongodb.org/manual/core/capped-collections/&#34;&gt;capped collections&lt;/a&gt; or where parameters other
than the defaults are necessary.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;insertOne&lt;/code&gt; and &lt;code&gt;insertMany&lt;/code&gt; methods also accept a second argument which can be an options object. This object can have the following fields:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number/String, &amp;gt; -1 || &amp;lsquo;majority&amp;rsquo;}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the write concern for the operation where &amp;lt; 1 returns an acknowledgment of the write with not results &lt;code&gt;{ok:1}&lt;/code&gt; and w &amp;gt;= 1 or w = &amp;lsquo;majority&amp;rsquo; acknowledges the write with full write results.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;wtimeout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number, 0}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;set the timeout for waiting for write concern to finish (combines with w option).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;write waits for journal sync.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;serializeFunctions&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;serialize functions on an object to mongodb, by default the driver does not serialize any functions on the passed in documents.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;forceServerObjectId&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Force server to assign _id values instead of driver.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The following example shows how to serialize a passed-in function when writing to a
&lt;a href=&#34;https://docs.mongodb.org/manual/core/replica-set-members/&#34;&gt;replica set&lt;/a&gt;.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  // Insert a single document
  db.collection(&#39;inserts&#39;).insertOne({
        a:1
      , b: function() { return &#39;hello&#39;; }
    }, {
        w: &#39;majority&#39;
      , wtimeout: 10000
      , serializeFunctions: true
    }, function(err, r) {
    assert.equal(null, err);
    assert.equal(1, r.insertedCount);
    db.close();
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Insert a single document
  var r = yield db.collection(&#39;inserts&#39;).insertOne({
        a:1
      , b: function() { return &#39;hello&#39;; }
    }, {
        w: &#39;majority&#39;
      , wtimeout: 10000
      , serializeFunctions: true
      , forceServerObjectId: true
    });

  assert.equal(1, r.insertedCount);
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;h3 id=&#34;updating-documents&#34;&gt;Updating Documents&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;updateOne&lt;/code&gt; and &lt;code&gt;updateMany&lt;/code&gt; methods exist on the &lt;code&gt;Collection&lt;/code&gt; class and are used to update and upsert documents.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  var col = db.collection(&#39;updates&#39;);
  // Insert a single document
  col.insertMany([{a:1}, {a:2}, {a:2}], function(err, r) {
    assert.equal(null, err);
    assert.equal(3, r.insertedCount);

    // Update a single document
    col.updateOne({a:1}, {$set: {b: 1}}, function(err, r) {
      assert.equal(null, err);
      assert.equal(1, r.matchedCount);
      assert.equal(1, r.modifiedCount);

      // Update multiple documents
      col.updateMany({a:2}, {$set: {b: 1}}, function(err, r) {
        assert.equal(null, err);
        assert.equal(2, r.matchedCount);
        assert.equal(2, r.modifiedCount);

        // Upsert a single document
        col.updateOne({a:3}, {$set: {b: 1}}, {
          upsert: true
        }, function(err, r) {
          assert.equal(null, err);
          assert.equal(0, r.matchedCount);
          assert.equal(1, r.upsertedCount);
          db.close();
        });
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the updates collection
  var col = db.collection(&#39;updates&#39;);
  // Insert a single document
  var r = yield col.insertMany([{a:1}, {a:2}, {a:2}]);
  assert.equal(3, r.insertedCount);

  // Update a single document
  var r = yield col.updateOne({a:1}, {$set: {b: 1}});
  assert.equal(1, r.matchedCount);
  assert.equal(1, r.modifiedCount);

  // Update multiple documents
  var r = yield col.updateMany({a:2}, {$set: {b: 1}});
  assert.equal(2, r.matchedCount);
  assert.equal(2, r.modifiedCount);

  // Upsert a single document
  var r = yield col.updateOne({a:3}, {$set: {b: 1}}, {
    upsert: true
  });
  assert.equal(0, r.matchedCount);
  assert.equal(1, r.upsertedCount);
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; method also accepts a third argument which can be an options object. This object can have the following fields:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number/String, &amp;gt; -1 || &amp;lsquo;majority&amp;rsquo;}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the write concern for the operation where &amp;lt; 1 returns an acknowledgment of the write with not results &lt;code&gt;{ok:1}&lt;/code&gt; and w &amp;gt;= 1 or w = &amp;lsquo;majority&amp;rsquo; acknowledges the write with full write results.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;wtimeout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number, 0}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;set the timeout for waiting for write concern to finish (combines with w option).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;write waits for journal sync.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;multi&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Update one/all documents with operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;upsert&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Update operation is an upsert.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Just as for &lt;code&gt;insert&lt;/code&gt;, the &lt;code&gt;update&lt;/code&gt; method allows you to specify a per operation write concern using the &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;wtimeout&lt;/code&gt; and &lt;code&gt;fsync&lt;/code&gt; parameters.&lt;/p&gt;

&lt;h3 id=&#34;removing-documents&#34;&gt;Removing Documents&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;deleteOne&lt;/code&gt; and &lt;code&gt;deleteMany&lt;/code&gt; methods exist on the &lt;code&gt;Collection&lt;/code&gt; class and are used to remove documents from MongoDB.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  var col = db.collection(&#39;removes&#39;);
  // Insert a single document
  col.insertMany([{a:1}, {a:2}, {a:2}], function(err, r) {
    assert.equal(null, err);
    assert.equal(3, r.insertedCount);

    // Remove a single document
    col.deleteOne({a:1}, function(err, r) {
      assert.equal(null, err);
      assert.equal(1, r.deletedCount);

      // Update multiple documents
      col.deleteMany({a:2}, function(err, r) {
        assert.equal(null, err);
        assert.equal(2, r.deletedCount);
        db.close();
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the removes collection
  var col = db.collection(&#39;removes&#39;);
  // Insert a single document
  var r = yield col.insertMany([{a:1}, {a:2}, {a:2}]);
  assert.equal(3, r.insertedCount);

  // Remove a single document
  var r = yield col.deleteOne({a:1});
  assert.equal(1, r.deletedCount);

  // Update multiple documents
  var r = yield col.deleteMany({a:2});
  assert.equal(2, r.deletedCount);
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;The &lt;code&gt;deleteOne&lt;/code&gt; and &lt;code&gt;deleteMany&lt;/code&gt; methods also accept a second argument which can be an options object. This object can have the following fields:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number/String, &amp;gt; -1 || &amp;lsquo;majority&amp;rsquo;}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the write concern for the operation where &amp;lt; 1 returns an acknowledgment of the write with not results &lt;code&gt;{ok:1}&lt;/code&gt; and w &amp;gt;= 1 or w = &amp;lsquo;majority&amp;rsquo; acknowledges the write with full write results.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;wtimeout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number, 0}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;set the timeout for waiting for write concern to finish (combines with w option).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;write waits for journal sync.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;single&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Removes the first document found.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Just as for &lt;code&gt;updateOne/updateMany&lt;/code&gt; and &lt;code&gt;insertOne/insertMany&lt;/code&gt;, the &lt;code&gt;deleteOne/deleteMany&lt;/code&gt; method allows you to specify a per operation write concern using the &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;wtimeout&lt;/code&gt; and &lt;code&gt;fsync&lt;/code&gt; parameters.&lt;/p&gt;

&lt;h3 id=&#34;findoneandupdate-findoneanddelete-and-findoneandreplace&#34;&gt;findOneAndUpdate, findOneAndDelete, and findOneAndReplace&lt;/h3&gt;

&lt;p&gt;The three methods &lt;code&gt;findOneAndUpdate&lt;/code&gt;, &lt;code&gt;findOneAndDelete&lt;/code&gt; and &lt;code&gt;findOneAndReplace&lt;/code&gt; are special commands which
allow the user to update or upsert a document and have the modified or existing document returned. When using these
methods, the operation takes a write lock for the duration of the operation in order to ensure the modification is
&lt;a href=&#34;https://docs.mongodb.org/manual/core/write-operations-atomicity/&#34;&gt;atomic&lt;/a&gt;.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  var col = db.collection(&#39;findAndModify&#39;);
  // Insert a single document
  col.insert([{a:1}, {a:2}, {a:2}], function(err, r) {
    assert.equal(null, err);
    assert.equal(3, r.result.n);

    // Modify and return the modified document
    col.findOneAndUpdate({a:1}, {$set: {b: 1}}, {
        returnOriginal: false
      , sort: [[a,1]]
      , upsert: true
    }, function(err, r) {
      assert.equal(null, err);
      assert.equal(1, r.value.b);

      // Remove and return a document
      col.findOneAndDelete({a:2}, function(err, r) {
        assert.equal(null, err);
        assert.ok(r.value.b == null);
        db.close();
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the findAndModify collection
  var col = db.collection(&#39;findAndModify&#39;);
  // Insert a single document
  var r = yield col.insert([{a:1}, {a:2}, {a:2}]);
  assert.equal(3, r.result.n);

  // Modify and return the modified document
  var r = yield col.findOneAndUpdate({a:1}, {$set: {b: 1}}, {
      returnOriginal: false
    , sort: [[a,1]]
    , upsert: true
  });
  assert.equal(1, r.value.b);

  // Remove and return a document
  var r = yield col.findOneAndDelete({a:2});
  assert.ok(r.value.b == null);
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;The &lt;code&gt;findOneAndUpdate&lt;/code&gt; method also accepts a third argument which can be an options object. This object can have the following fields:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number/String, &amp;gt; -1 || &amp;lsquo;majority&amp;rsquo;}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the write concern for the operation where &amp;lt; 1 returns an acknowledgment of the write with not results &lt;code&gt;{ok:1}&lt;/code&gt; and w &amp;gt;= 1 or w = &amp;lsquo;majority&amp;rsquo; acknowledges the write with full write results.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;wtimeout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number, 0}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;set the timeout for waiting for write concern to finish (combines with w option).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;write waits for journal sync.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;upsert&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Perform an upsert operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Object, default:null)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sort for find operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;projection&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Object, default:null)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Projection for returned result&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;returnOriginal&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:true)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set to false if you want to return the modified object rather than the original. Ignored for remove.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;findOneAndDelete&lt;/code&gt; function is designed to help remove a document.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  var col = db.collection(&#39;findAndModify&#39;);
  // Insert a single document
  col.insert([{a:1}, {a:2}, {a:2}], function(err, r) {
    assert.equal(null, err);
    assert.equal(3, r.result.n);

    // Remove a document from MongoDB and return it
    col.findOneAndDelete({a:1}, {
        sort: [[a,1]]
      }
      , function(err, r) {
        assert.equal(null, err);
        assert.ok(r.value.b == null);
        db.close();
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the findAndModify collection
  var col = db.collection(&#39;findAndModify&#39;);
  // Insert a single document
  var r = yield col.insert([{a:1}, {a:2}, {a:2}]);
  assert.equal(3, r.result.n);

  // Remove a document from MongoDB and return it
  var r = yield col.findOneAndDelete({a:1}, {
      sort: [[a,1]]
    });
  assert.ok(r.value.b == null);
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;Like &lt;code&gt;findOneAndUpdate&lt;/code&gt;, it allows an object of options to be passed in which can have the following fields:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number/String, &amp;gt; -1 || &amp;lsquo;majority&amp;rsquo;}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the write concern for the operation where &amp;lt; 1 returns an acknowledgment of the write with not results &lt;code&gt;{ok:1}&lt;/code&gt; and w &amp;gt;= 1 or w = &amp;lsquo;majority&amp;rsquo; acknowledges the write with full write results.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;wtimeout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number, 0}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;set the timeout for waiting for write concern to finish (combines with w option).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;write waits for journal sync.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Object, default:null)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sort for find operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;bulkwrite&#34;&gt;BulkWrite&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;bulkWrite&lt;/code&gt; function allows a simple set of bulk operations to run in a non-fluent way, in comparison to the bulk API discussed next.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the collection
  var col = db.collection(&#39;bulk_write&#39;);
  col.bulkWrite([
      { insertOne: { document: { a: 1 } } }
    , { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
    , { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
    , { deleteOne: { filter: {c:1} } }
    , { deleteMany: { filter: {c:1} } }
    , { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true}}]
  , {ordered:true, w:1}, function(err, r) {
    assert.equal(null, err);
    assert.equal(1, r.insertedCount);
    assert.equal(1, Object.keys(r.insertedIds).length);
    assert.equal(1, r.matchedCount);
    assert.equal(0, r.modifiedCount);
    assert.equal(0, r.deletedCount);
    assert.equal(2, r.upsertedCount);
    assert.equal(2, Object.keys(r.upsertedIds).length);

    // Ordered bulk operation
    db.close();
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the collection
  var col = db.collection(&#39;bulk_write&#39;);
  var r = yield col.bulkWrite([
      { insertOne: { document: { a: 1 } } }
    , { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
    , { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
    , { deleteOne: { filter: {c:1} } }
    , { deleteMany: { filter: {c:1} } }
    , { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true}}]
  , {ordered:true, w:1});
  assert.equal(1, r.insertedCount);
  assert.equal(1, Object.keys(r.insertedIds).length);
  assert.equal(1, r.matchedCount);
  assert.equal(0, r.modifiedCount);
  assert.equal(0, r.deletedCount);
  assert.equal(2, r.upsertedCount);
  assert.equal(2, Object.keys(r.upsertedIds).length);

  // Ordered bulk operation
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;The &lt;code&gt;bulkWrite&lt;/code&gt; function takes an array of operations which can be objects of either &lt;code&gt;insertOne&lt;/code&gt;, &lt;code&gt;insertMany&lt;/code&gt;, &lt;code&gt;updateOne&lt;/code&gt;, &lt;code&gt;updateMany&lt;/code&gt;, &lt;code&gt;deleteOne&lt;/code&gt; or &lt;code&gt;deleteMany&lt;/code&gt;. It also takes a second parameter which takes the following options:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ordered&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:true)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Execute in order or out of order.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number/String, &amp;gt; -1 || &amp;lsquo;majority&amp;rsquo;}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the write concern for the operation where &amp;lt; 1 returns an acknowledgment of the write with not results &lt;code&gt;{ok:1}&lt;/code&gt; and w &amp;gt;= 1 or w = &amp;lsquo;majority&amp;rsquo; acknowledges the write with full write results.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;wtimeout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Number, 0}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;set the timeout for waiting for write concern to finish (combines with w option).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Boolean, default:false)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;write waits for journal sync.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;bulk-write-operations&#34;&gt;Bulk Write Operations&lt;/h2&gt;

&lt;p&gt;Bulk write operations make it easy to write groups of operations together to MongoDB. There are some caveats and to get the best performance you need to be running against MongoDB version 2.6 or higher, which supports the new write commands. Bulk operations are split into &lt;em&gt;ordered&lt;/em&gt; and &lt;em&gt;unordered&lt;/em&gt; bulk operations. An &lt;em&gt;ordered&lt;/em&gt; bulk operation guarantees the order of execution of writes while the &lt;em&gt;unordered&lt;/em&gt; bulk operation makes no assumptions about the order of execution. In the Node.js driver the &lt;em&gt;unordered&lt;/em&gt; bulk operations will group operations according to type and write them in parallel.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  var col = db.collection(&#39;bulkops&#39;);
  // Create ordered bulk, for unordered initializeUnorderedBulkOp()
  var bulk = col.initializeOrderedBulkOp();
  // Insert 10 documents
  for(var i = 0; i &lt; 10; i++) {
    bulk.insert({a: i});
  }

  // Next perform some upserts
  for(var i = 0; i &lt; 10; i++) {
    bulk.find({b:i}).upsert().updateOne({b:1});
  }

  // Finally perform a remove operation
  bulk.find({b:1}).deleteOne();

  // Execute the bulk with a journal write concern
  bulk.execute(function(err, result) {
    assert.equal(null, err);
    db.close();
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the collection
  var col = db.collection(&#39;bulkops&#39;);
  // Create ordered bulk, for unordered initializeUnorderedBulkOp()
  var bulk = col.initializeOrderedBulkOp();
  // Insert 10 documents
  for(var i = 0; i &lt; 10; i++) {
    bulk.insert({a: i});
  }

  // Next perform some upserts
  for(var i = 0; i &lt; 10; i++) {
    bulk.find({b:i}).upsert().updateOne({b:1});
  }

  // Finally perform a remove operation
  bulk.find({b:1}).deleteOne();

  // Execute the bulk with a journal write concern
  var result = yield bulk.execute();
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;The Bulk API handles all the splitting of operations into multiple writes and also emulates 2.6 and higher write commands for 2.4 and earlier servers.&lt;/p&gt;

&lt;p&gt;There are some important things to keep in mind when using the bulk API and especially the &lt;em&gt;ordered&lt;/em&gt; bulk API mode. The write commands are single operation type. That means they can only do insert/update and remove. If you f.ex do the following combination of operations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Insert {a:1}
Update {a:1} to {a:1, b:1}
Insert {a:2}
Remove {b:1}
Insert {a:3}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will result in the driver issuing four write commands to the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Insert Command with {a:1}
Update Command {a:1} to {a:1, b:1}
Insert Command with {a:2}
Remove Command with {b:1}
Insert Command with {a:3}    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you instead organize your &lt;em&gt;ordered&lt;/em&gt; in the following manner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Insert {a:1}
Insert {a:2}
Insert {a:3}
Update {a:1} to {a:1, b:1}
Remove {b:1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The number of write commands issued by the driver will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Insert Command with {a:1}, {a:2}, {a:3}
Update Command {a:1} to {a:1, b:1}
Remove Command with {b:1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention to the order of operations results in more efficient and faster bulk write operation.&lt;/p&gt;

&lt;p&gt;For &lt;em&gt;unordered&lt;/em&gt; bulk operations this is not important, as the driver sorts operations by type and executes them in parallel.&lt;/p&gt;

&lt;h2 id=&#34;read-methods&#34;&gt;Read Methods&lt;/h2&gt;

&lt;p&gt;The main method for querying the database is the &lt;code&gt;find&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find&lt;/code&gt; returns a cursor which allows the user to operate on the data. The &lt;em&gt;cursor&lt;/em&gt; also implements the Node.js 0.10.x or higher stream interface, allowing the user to pipe the results to other streams.&lt;/p&gt;

&lt;p&gt;The following example materializes all the documents from a query using the &lt;code&gt;toArray&lt;/code&gt; method, but limits the number of returned results to two documents.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  var col = db.collection(&#39;find&#39;);
  // Insert a single document
  col.insertMany([{a:1}, {a:1}, {a:1}], function(err, r) {
    assert.equal(null, err);
    assert.equal(3, r.insertedCount);

    // Get first two documents that match the query
    col.find({a:1}).limit(2).toArray(function(err, docs) {
      assert.equal(null, err);
      assert.equal(2, docs.length);
      db.close();
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the collection
  var col = db.collection(&#39;find&#39;);
  // Insert a single document
  var r = yield col.insertMany([{a:1}, {a:1}, {a:1}]);
  assert.equal(3, r.insertedCount);

  // Get first two documents that match the query
  var docs = yield col.find({a:1}).limit(2).toArray();
  assert.equal(2, docs.length);
  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;The cursor returned by the &lt;code&gt;find&lt;/code&gt; method has several methods that allow for chaining of options for a query. Once the query is ready to be executed you can retrieve the documents using the &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;each&lt;/code&gt; and &lt;code&gt;toArray&lt;/code&gt; methods. If the query returns many documents it&amp;rsquo;s preferable to use the &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;each&lt;/code&gt; methods, as the &lt;code&gt;toArray&lt;/code&gt; method will materialize all the documents into memory before calling the callback function, potentially using a lot of memory if the query returns many documents.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;collection.find({}).project({a:1})                             // Create a projection of field a
collection.find({}).skip(1).limit(10)                          // Skip 1 and limit 10
collection.find({}).batchSize(5)                               // Set batchSize on cursor to 5
collection.find({}).filter({a:1})                              // Set query on the cursor
collection.find({}).comment(&#39;add a comment&#39;)                   // Add a comment to the query, allowing to correlate queries
collection.find({}).addCursorFlag(&#39;tailable&#39;, true)            // Set cursor as tailable
collection.find({}).addCursorFlag(&#39;oplogReplay&#39;, true)         // Set cursor as oplogReplay
collection.find({}).addCursorFlag(&#39;noCursorTimeout&#39;, true)     // Set cursor as noCursorTimeout
collection.find({}).addCursorFlag(&#39;awaitData&#39;, true)           // Set cursor as awaitData
collection.find({}).addCursorFlag(&#39;exhaust&#39;, true)             // Set cursor as exhaust
collection.find({}).addCursorFlag(&#39;partial&#39;, true)             // Set cursor as partial
collection.find({}).addQueryModifier(&#39;$orderby&#39;, {a:1})        // Set $orderby {a:1}
collection.find({}).max(10)                                    // Set the cursor maxScan
collection.find({}).maxScan(10)                                // Set the cursor maxScan
collection.find({}).maxTimeMS(1000)                            // Set the cursor maxTimeMS
collection.find({}).min(100)                                   // Set the cursor min
collection.find({}).returnKey(10)                              // Set the cursor returnKey
collection.find({}).setReadPreference(ReadPreference.PRIMARY)  // Set the cursor readPreference
collection.find({}).showRecordId(true)                         // Set the cursor showRecordId
collection.find({}).snapshot(true)                             // Set the cursor snapshot
collection.find({}).sort([[&#39;a&#39;, 1]])                           // Sets the sort order of the cursor query
collection.find({}).hint(&#39;a_1&#39;)                                // Set the cursor hint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All options are chainable, so you can combine settings in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;collection.find({}).maxTimeMS(1000).maxScan(100).skip(1).toArray(..)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More information can be found in the &lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.0/api/Cursor.html&#34;&gt;Cursor API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following example uses the &lt;code&gt;next&lt;/code&gt; method.&lt;/p&gt;

&lt;section class=&#34;javascript5&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  var col = db.collection(&#39;find&#39;);
  // Insert a single document
  col.insertMany([{a:1}, {a:1}, {a:1}], function(err, r) {
    assert.equal(null, err);
    assert.equal(3, r.insertedCount);

    // Get first documents from cursor
    col.find({a:1}).limit(2).next(function(err, doc) {
      assert.equal(null, err);
      assert.ok(doc != null);
      db.close();
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;section class=&#34;javascript6 hidden&#34;&gt;
In ECMAScript 6, The new `generator` functions allow for what is arguably a
much cleaner and easier way to read iteration code.

&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  co = require(&#39;co&#39;),
  assert = require(&#39;assert&#39;);

co(function*() {
  // Connection URL
  var db = yield MongoClient.connect(&#39;mongodb://localhost:27017/myproject&#39;);
  console.log(&#34;Connected correctly to server&#34;);

  // Get the collection
  var col = db.collection(&#39;find&#39;);
  // Insert a single document
  var r = yield col.insertMany([{a:1}, {a:1}, {a:1}]);
  assert.equal(3, r.insertedCount);

  // Get the cursor
  var cursor = col.find({a:1}).limit(2);

  // Iterate over the cursor
  while(yield cursor.hasNext()) {
    var doc = yield cursor.next();
    console.dir(doc);
  }

  db.close();
}).catch(function(err) {
  console.log(err.stack);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;

&lt;p&gt;The &lt;code&gt;next&lt;/code&gt; method allows the application to read one document at a time using callbacks.&lt;/p&gt;

&lt;p&gt;The following example uses the &lt;code&gt;each&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
 , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  var col = db.collection(&#39;find&#39;);
  // Insert a single document
  col.insertMany([{a:1}, {a:1}, {a:1}], function(err, r) {
    assert.equal(null, err);
    assert.equal(3, r.insertedCount);

    // Get first documents from cursor using each
    col.find({a:1}).limit(2).each(function(err, doc) {
      if(doc) {
        db.close();
        // Got a document, terminate the each
        return false;
      }
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;each&lt;/code&gt; method calls the supplied callback until there are no more documents available that satisfy the query. Once the available documents are exhausted it will return &lt;code&gt;null&lt;/code&gt; for the second parameter in the callback. If you wish to terminate the &lt;code&gt;each&lt;/code&gt; early you should return false in your &lt;code&gt;each&lt;/code&gt; callback. This will stop the cursor from returning documents.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>/node-mongodb-native/2.2/tutorials/connect/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/connect/</guid>
      <description>

&lt;h1 id=&#34;connect-to-mongodb&#34;&gt;Connect to MongoDB&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;This reference applies to &lt;strong&gt;2.1.11&lt;/strong&gt; or higher. For &lt;strong&gt;2.1.10&lt;/strong&gt; or
earlier, refer to the &lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/reference/connecting/legacy-connection-settings/&#34;&gt;legacy connection settings&lt;/a&gt;. &lt;strong&gt;2.1.11&lt;/strong&gt;
is backward compatible with the legacy settings as well as the
simplified settings.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;MongoClient.connect&lt;/code&gt; method to connect to a running MongoDB deployment.&lt;/p&gt;

&lt;h2 id=&#34;connect-to-a-single-mongodb-instance&#34;&gt;Connect to a Single MongoDB Instance&lt;/h2&gt;

&lt;p&gt;To connect to a single MongoDB instance, specify the URI of the MongoDB
instance to connect to.&lt;/p&gt;

&lt;p&gt;In the following example, the
&lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;
specifies connecting to a MongoDB instance that is running on
&lt;code&gt;localhost&lt;/code&gt; using port &lt;code&gt;27017&lt;/code&gt;. The &lt;code&gt;myproject&lt;/code&gt; indicates the database
to use. If the database is omitted, the &lt;code&gt;MongoClient&lt;/code&gt; uses the default &lt;code&gt;test&lt;/code&gt; database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017/myproject&#39;;

// Use connect method to connect to the server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected successfully to server&#34;);

  db.close();
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on the URI connection string, see
&lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection String &lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;connect-to-a-replica-set&#34;&gt;Connect to a Replica Set&lt;/h2&gt;

&lt;p&gt;To connect to a &lt;a href=&#34;https://docs.mongodb.org/manual/core/replication-introduction/&#34;&gt;replica set&lt;/a&gt;,
include a seedlist of replica set members and the name of the replica set in the
&lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the following example, the connection string specifies two of the replica set members running on &lt;code&gt;localhost:27017&lt;/code&gt; and &lt;code&gt;localhost:27018&lt;/code&gt;, the database to access (&lt;code&gt;myproject&lt;/code&gt;), and the name of the replica set (&lt;code&gt;foo&lt;/code&gt;). &lt;strong&gt;When using the 2.0 driver, you must include the replica set name.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:27017,localhost:27018/myproject?replicaSet=foo&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected correctly to server&#34;);

  db.close();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on the URI connection string, see
&lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection String &lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;connect-to-sharded-cluster&#34;&gt;Connect to Sharded Cluster&lt;/h2&gt;

&lt;p&gt;To connect to a &lt;a href=&#34;https://docs.mongodb.org/manual/core/sharded-cluster-components/&#34;&gt;sharded cluster&lt;/a&gt;, specify the &lt;code&gt;mongos&lt;/code&gt; instance or instances in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the following example, the connection string specifies the &lt;code&gt;mongos&lt;/code&gt; instances running on &lt;code&gt;localhost:50000&lt;/code&gt; and &lt;code&gt;localhost:50001&lt;/code&gt; and the database to access (&lt;code&gt;myproject&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);

// Connection URL
var url = &#39;mongodb://localhost:50000,localhost:50001/myproject&#39;;
// Use connect method to connect to the Server
MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  console.log(&#34;Connected successfully to server&#34;);

  db.close();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on the URI connection string, see
&lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection String &lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;connection-options&#34;&gt;Connection Options&lt;/h2&gt;

&lt;p&gt;You can specify various connection settings in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection
String &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, you can specify TLS/SSL and authentication setting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  assert = require(&#39;assert&#39;),
  fs = require(&#39;fs&#39;);

  // Read the certificate authority
  var ca = [fs.readFileSync(__dirname + &amp;quot;/ssl/ca.pem&amp;quot;)];
  var cert = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);

// Connection URL
var url = &#39;mongodb://dave:password@localhost:27017?authMechanism=DEFAULT&amp;amp;authSource=db&amp;amp;ssl=true&amp;quot;&#39;;

// Use connect method to connect to the Server passing in
// additional options
MongoClient.connect(url,  {
  server: {
      sslValidate:true
    , sslCA:ca
    , sslCert:cert
  }
}, function(err, db) {
  assert.equal(null, err);
  console.log(&amp;quot;Connected correctly to server&amp;quot;);

  db.close();
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on connecting with authentication and TSL/SSL, see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/connect/authenticating/&#34;&gt;Authentication&lt;/a&gt;: detailed documentation of the various ways to specify authentication credentials&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/connect/ssl/&#34;&gt;TLS/SSL&lt;/a&gt;: Detailed documentation of the various ways to specify the properties of an TLS/SSL connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on the connection options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection String&lt;/a&gt;: MongoDB connection string URI.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/reference/connecting/connection-settings/&#34;&gt;Connection Settings&lt;/a&gt;: Reference on the driver-specific connection settings.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SSL Settings</title>
      <link>/node-mongodb-native/2.2/tutorials/connect/ssl/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/connect/ssl/</guid>
      <description>

&lt;h1 id=&#34;tls-ssl&#34;&gt;TLS/SSL&lt;/h1&gt;

&lt;p&gt;The Node.js driver supports TLS/SSL connections to MongoDB that support TLS/SSL support.&lt;/p&gt;

&lt;h2 id=&#34;no-certificate-validation&#34;&gt;No Certificate Validation&lt;/h2&gt;

&lt;p&gt;If the MongoDB instance does not perform any validation of the certificate chain, include the &lt;code&gt;ssl=true&lt;/code&gt; in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection String &lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient;

MongoClient.connect(&amp;quot;mongodb://localhost:27017/test?ssl=true&amp;quot;, function(err, db) {
  db.close();
});

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-server-certificate&#34;&gt;Validate Server Certificate&lt;/h2&gt;

&lt;p&gt;If the MongoDB instance presents a certificate, to validate the server&amp;rsquo;s certificate, pass to the &lt;code&gt;MongoClient.connect&lt;/code&gt; method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection String &lt;/a&gt; that includes &lt;code&gt;ssl=true&lt;/code&gt; setting,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A connections options for the &lt;code&gt;server&lt;/code&gt; with the certificate for the Certificate Authority (&lt;code&gt;sslCA&lt;/code&gt;) and the &lt;code&gt;sslValidate&lt;/code&gt; setting set to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  fs = require(&#39;fs&#39;);

// Read the certificate authority
var ca = [fs.readFileSync(__dirname + &amp;quot;/ssl/ca.pem&amp;quot;)];

// Connect validating the returned certificates from the server
MongoClient.connect(&amp;quot;mongodb://localhost:27017/test?ssl=true&amp;quot;, {
  server: {
      sslValidate:true
    , sslCA:ca
  }
}, function(err, db) {
  db.close();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;disable-hostname-verification&#34;&gt;Disable Hostname Verification&lt;/h2&gt;

&lt;p&gt;By default, the driver ensures that the hostname included in the
server&amp;rsquo;s SSL certificate(s) matches the hostname(s) provided in the URI connection string. If you need to disable the hostname verification, but otherwise validate the server&amp;rsquo;s certificate, pass to the &lt;code&gt;MongoClient.connect&lt;/code&gt; method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection String &lt;/a&gt; that includes &lt;code&gt;ssl=true&lt;/code&gt; setting,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A connections options for the &lt;code&gt;server&lt;/code&gt; with the certificate for the Certificate Authority (&lt;code&gt;sslCA&lt;/code&gt;) and the &lt;code&gt;sslValidate&lt;/code&gt; setting set to &lt;code&gt;true&lt;/code&gt; but  &lt;code&gt;checkServerIdentity&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  fs = require(&#39;fs&#39;);

// Read the certificate authority
var ca = [fs.readFileSync(__dirname + &amp;quot;/ssl/ca.pem&amp;quot;)];

// Connect validating the returned certificates from the server
MongoClient.connect(&amp;quot;mongodb://localhost:27017/test?ssl=true&amp;quot;, {
  server: {
      sslValidate:true
    , checkServerIdentity:false
    , sslCA:ca
  }
}, function(err, db) {
  db.close();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-server-certificate-and-present-valid-certificate&#34;&gt;Validate Server Certificate and Present Valid Certificate&lt;/h2&gt;

&lt;p&gt;If the MongoDB server performs certificate validation, the client must pass its
certificate to the server. To pass the client&amp;rsquo;s certificate as well as to validate the server&amp;rsquo;s certificate, pass to the &lt;code&gt;MongoClient.connect&lt;/code&gt; method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI Connection String &lt;/a&gt; that includes &lt;code&gt;ssl=true&lt;/code&gt; setting,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A connections options for the &lt;code&gt;server&lt;/code&gt; with the &lt;code&gt;sslValidate&lt;/code&gt; setting set to &lt;code&gt;true&lt;/code&gt;, the certificate for the Certificate Authority (&lt;code&gt;sslCA&lt;/code&gt;), the client&amp;rsquo;s certificate (&lt;code&gt;sslCert&lt;/code&gt;) and private key file (&lt;code&gt;sslKey&lt;/code&gt;).  If the client&amp;rsquo;s key file is encrypted, include the password (&lt;code&gt;sslPass&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  fs = require(&#39;fs&#39;);

// Read the certificates
var ca = [fs.readFileSync(__dirname + &amp;quot;/ssl/ca.pem&amp;quot;)];
var cert = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);
var key = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);

// Connect validating the returned certificates from the server
MongoClient.connect(&amp;quot;mongodb://localhost:27017/test?ssl=true&amp;quot;, {
  server: {
      sslValidate:true
    , sslCA:ca
    , sslKey:key
    , sslCert:cert
    , sslPass:&#39;10gen&#39;
  }
}, function(err, db) {
  db.close();
});

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;connect-with-x-509&#34;&gt;Connect with X.509&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#x-509-certificate-authentication&#34;&gt;X.509&lt;/a&gt; authentication requires the use of TLS/SSL connections with certificate validation. MongoDB uses the X.509 certificate presented during SSL negotiation to authenticate a user whose name is derived from the distinguished name of the X.509 certificate.&lt;/p&gt;

&lt;p&gt;To connect using the X.509 authentication mechanism, specify &lt;code&gt;MONGODB-CR&lt;/code&gt; as the mechanism in the &lt;a href=&#34;https://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;URI connection string&lt;/a&gt;, &lt;code&gt;ssl=true&lt;/code&gt;, and the username. Use &lt;code&gt;enodeURIComponent&lt;/code&gt; to encode the username string.&lt;/p&gt;

&lt;p&gt;In addition to the connection string, pass to the &lt;code&gt;MongoClient.connect&lt;/code&gt; method
a connections options for the &lt;code&gt;server&lt;/code&gt; with  the X.509 certificate and other &lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/connect/ssl/&#34;&gt;TLS/SSL connections&lt;/a&gt; options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  f = require(&#39;util&#39;).format,
  fs = require(&#39;fs&#39;);

// Read the cert and key
var cert = fs.readFileSync(__dirname + &amp;quot;/ssl/x509/client.pem&amp;quot;);
var key = fs.readFileSync(__dirname + &amp;quot;/ssl/x509/client.pem&amp;quot;);

// User name
var userName = &amp;quot;CN=client,OU=kerneluser,O=10Gen,L=New York City,ST=New York,C=US&amp;quot;;

// Connect using the MONGODB-X509 authentication mechanism
MongoClient.connect(f(&#39;mongodb://%s@server:27017/test?authMechanism=%s&amp;amp;ssl=true&#39;
    , encodeURIComponent(userName), &#39;MONGODB-X509&#39;), {
  server: {
      sslKey:key
    , sslCert:cert
  }
}, function(err, db) {
  db.close();
});

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tls-ssl-options&#34;&gt;TLS/SSL Options&lt;/h2&gt;

&lt;p&gt;The following TLS/SSL options are available.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Boolean, default: false}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Use ssl connection&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sslValidate&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Boolean, default: true}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Validate server certificate against certificate authority.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sslCA&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Buffer[]|string[], default: null}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Array of valid certificates for Certificate Authority either as Buffers or Strings.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sslCert&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Buffer|string, default: null}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String or buffer containing the client certificate.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sslPass&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;{Buffer|string, default: null}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String or buffer containing the client certificate password.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To connect to a single MongoDB instance, specify the TLS/SSL connection options for &lt;code&gt;server&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  fs = require(&#39;fs&#39;);


// Read the certificates

var ca = [fs.readFileSync(__dirname + &amp;quot;/ssl/ca.pem&amp;quot;)];
var cert = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);
var key = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);

MongoClient.connect(&#39;mongodb://server:27017/test?ssl=true&#39;, {
  server: {
      sslCA:ca
    , sslKey:key
    , sslCert:cert
  }
}, function(err, db) {
  db.close();
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To connect to a replica set, specify the TLS/SSL connection options for &lt;code&gt;replset&lt;/code&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  fs = require(&#39;fs&#39;);

// Read the certificates

var ca = [fs.readFileSync(__dirname + &amp;quot;/ssl/ca.pem&amp;quot;)];
var cert = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);
var key = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);


MongoClient.connect(&#39;mongodb://server:27017/test?replicaSet=foo&amp;amp;ssl=true&#39;, {
  replset: {
      sslCA:ca
    , sslKey:key
    , sslCert:cert
  }
}, function(err, db) {
  db.close();
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To connect to a replica set, specify the TLS/SSL connection options for &lt;code&gt;mongos&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient,
  fs = require(&#39;fs&#39;);

// Read the certificates

var ca = [fs.readFileSync(__dirname + &amp;quot;/ssl/ca.pem&amp;quot;)];
var cert = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);
var key = fs.readFileSync(__dirname + &amp;quot;/ssl/client.pem&amp;quot;);

MongoClient.connect(&#39;mongodb://server:27017/test?ssl=true&#39;, {
  mongos: {
      sslCA:ca
    , sslKey:key
    , sslCert:cert
  }
}, function(err, db) {
  db.close();
});

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/node-mongodb-native/2.2/tutorials/aggregation/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/aggregation/</guid>
      <description>

&lt;h1 id=&#34;aggregation&#34;&gt;Aggregation&lt;/h1&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Aggregation operations process data records and return
computed results. Aggregation operations group values from
multiple documents together, and can perform a variety of
operations on the grouped data to return a single result.&lt;/p&gt;

&lt;h2 id=&#34;the-aggregation-pipeline&#34;&gt;The Aggregation Pipeline&lt;/h2&gt;

&lt;p&gt;The aggregation pipeline is a framework for data aggregation
modeled on the concept of data processing pipelines. Documents
enter a multi-stage pipeline that transforms the documents into
aggregated results.&lt;/p&gt;

&lt;p&gt;For a full explanation and a complete list of pipeline stages
and operators, see the
&lt;a href=&#34;https://docs.mongodb.com/manual/core/aggregation-pipeline/&#34;&gt;manual:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following example uses the aggregation pipeline on the
&lt;code&gt;restaurants&lt;/code&gt; sample dataset to find
a list of the total number of 5-star restaurants, grouped by restaurant
category.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);
var url = &#39;mongodb://localhost:27017/test&#39;;

MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  simplePipeline(db, function() {
    db.close();
  });
});

var simplePipeline = function(db, callback) {
  var collection = db.collection( &#39;restaurants&#39; );
  collection.aggregate( 
      [ { &#39;$match&#39;: { &amp;quot;stars&amp;quot;: 5 } },
        { &#39;$unwind&#39;: &#39;$categories&#39;},
        { &#39;$group&#39;: { &#39;_id&#39;: &amp;quot;$categories&amp;quot;, &#39;fiveStars&#39;: { &#39;$sum&#39;: 1 } } }		
      ],	  
	  function(err, results) {
        assert.equal(err, null);

        console.log(results)
        callback(results);
      }
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the &lt;code&gt;aggregate&lt;/code&gt; method, the first pipeline stage filters out
all documents except those with &lt;code&gt;5&lt;/code&gt; in the &lt;code&gt;stars&lt;/code&gt; field. The
second stage unwinds the &lt;code&gt;categories&lt;/code&gt; field, which is an array, and
treats each item in the array as a separate document. The third stage
groups the documents by category and adds up the number of matching
5-star results.&lt;/p&gt;

&lt;h2 id=&#34;single-purpose-aggregation-operations&#34;&gt;Single Purpose Aggregation Operations&lt;/h2&gt;

&lt;p&gt;MongoDB provides helper methods for some aggregation functions,
including &lt;a href=&#34;https://docs.mongodb.com/manual/reference/command/count/&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;https://docs.mongodb.com/manual/reference/command/group/&#34;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/a&gt;,
and &lt;a href=&#34;https://docs.mongodb.com/manual/reference/command/distinct/&#34;&gt;&lt;code&gt;distinct&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;count&#34;&gt;Count&lt;/h3&gt;

&lt;p&gt;The following example demonstrates how to use the &lt;code&gt;count&lt;/code&gt; method to
find the total number of documents which have the exact array
&lt;code&gt;[ &#39;Chinese&#39;, &#39;Seafood&#39; ]&lt;/code&gt; in the &lt;code&gt;categories&lt;/code&gt; field.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);
var url = &#39;mongodb://localhost:27017/test&#39;;

MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  simpleCount(db, function() {
    db.close();
  });
});

var simpleCount = function(db, callback) {
  var collection = db.collection( &#39;restaurants&#39; );
  collection.count({ &#39;categories&#39;: [ &#39;Chinese&#39;, &#39;Seafood&#39; ] },	  
	  function(err, result) {
        assert.equal(err, null);
        console.log(result)
        callback(result);
      }
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;group&#34;&gt;Group&lt;/h3&gt;

&lt;p&gt;The following example uses the &lt;code&gt;group&lt;/code&gt; method with four
arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;an array of fields to group by&lt;/li&gt;
&lt;li&gt;a document with conditions for filterings&lt;/li&gt;
&lt;li&gt;an initial results document&lt;/li&gt;
&lt;li&gt;a reduce function&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The example groups the results by number of stars where the &lt;code&gt;categories&lt;/code&gt;
array is &lt;code&gt;[&#39;Peruvian&#39;]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);
var url = &#39;mongodb://localhost:27017/test&#39;;

MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  simpleGroup(db, function() {
    db.close();
  });
});

var simpleGroup = function(db, callback) {
    var collection = db.collection( &#39;restaurants&#39; );
    collection.group( [&#39;stars&#39;], 
                      { &#39;categories&#39;: [&#39;Peruvian&#39;] }, 
                      { &#39;total&#39;: 0 },
                      &amp;quot;function ( curr, result ) { result.total++ }&amp;quot;,  
	  
      function(err, result) {
        assert.equal(err, null);
        console.log(result)
        callback(result);
      }
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;distinct&#34;&gt;Distinct&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;distinct&lt;/code&gt; helper method eliminates results which contain
values and returns one record for each unique value.&lt;/p&gt;

&lt;p&gt;The following example returns a list of unique values for the
&lt;code&gt;categories&lt;/code&gt; field in the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MongoClient = require(&#39;mongodb&#39;).MongoClient
  , assert = require(&#39;assert&#39;);
var url = &#39;mongodb://localhost:27017/test&#39;;

MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);
  simpleDistinct(db, function() {
    db.close();
  });
});

var simpleDistinct = function(db, callback) {
	var collection = db.collection( &#39;restaurants&#39; );
    collection.distinct( &#39;categories&#39;, 
	  
	  function(err, result) {
        assert.equal(err, null);
        console.log(result)
        callback(result);
      }
  );
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create Indexes</title>
      <link>/node-mongodb-native/2.2/tutorials/create-indexes/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/create-indexes/</guid>
      <description>

&lt;h1 id=&#34;create-indexes&#34;&gt;Create Indexes&lt;/h1&gt;

&lt;p&gt;To create an index on a field or fields, pass an index specification
document to the &lt;code&gt;createIndex()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
   { &amp;lt;field1&amp;gt;: &amp;lt;type1&amp;gt;, &amp;lt;field2&amp;gt;: &amp;lt;type2&amp;gt; ... }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-an-ascending-index&#34;&gt;Create an Ascending Index&lt;/h2&gt;

&lt;p&gt;For an ascending index type, specify &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following example creates an ascending index key for the
&lt;code&gt;quantity&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var createAscendingIndex = function(db, callback) {
  // Get the users collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { dateOfBirth : 1 }, function(err, result) {
    console.log(result);
    callback(result);
  });
};

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-descending-index&#34;&gt;Create a Descending Index&lt;/h2&gt;

&lt;p&gt;For an ascending index type, specify &lt;code&gt;-1&lt;/code&gt; for &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following example specifies a descending index key on the
&lt;code&gt;lastName&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var createDescendingIndex = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { lastName : -1 }, function(err, result) {
    console.log(result);
    callback(result);
  });
};

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-compound-index&#34;&gt;Create a Compound Index&lt;/h2&gt;

&lt;p&gt;To specify a compound index, use the &lt;code&gt;compoundIndex&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The following example specifies a compound index key composed of the
&lt;code&gt;lastName&lt;/code&gt; field sorted in descending order, followed by the
&lt;code&gt;dateOfBirth&lt;/code&gt; field sorted in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var createCompoundIndex = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { lastName : -1, dateOfBirth : 1 }, function(err, result) {
    console.log(result);
    callback(result);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-text-index&#34;&gt;Create a Text Index&lt;/h2&gt;

&lt;p&gt;MongoDB also provides
&lt;a href=&#34;https://docs.mongodb.org/manual/core/index-text/&#34;&gt;text&lt;/a&gt; indexes to
support text search of string content. Text indexes can include any
field whose value is a string or an array of string elements.&lt;/p&gt;

&lt;p&gt;This example specifies a text index key for the &lt;code&gt;content&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var createTextIndex = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { comments : &#34;text&#34; }, function(err, result) {
    console.log(result);
    callback(result);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-hashed-index&#34;&gt;Create a Hashed Index&lt;/h2&gt;

&lt;p&gt;To specify a &lt;a href=&#34;https://docs.mongodb.org/manual/core/index-hashed/&#34;&gt;hashed&lt;/a&gt; index key,
use the &lt;code&gt;hashed&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This example specifies a hashed index key for the &lt;code&gt;timestamp&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var createHashedIndex = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { timestamp : &amp;quot;hashed&amp;quot; }, function(err, result) {
    console.log(result);
    callback(result);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-geospatial-indexes&#34;&gt;Create Geospatial Indexes&lt;/h2&gt;

&lt;p&gt;There are also helpers for creating the index keys for the various
geospatial indexes supported by mongodb.&lt;/p&gt;

&lt;h3 id=&#34;create-a-2dsphere-index&#34;&gt;Create a &lt;code&gt;2dsphere&lt;/code&gt; Index&lt;/h3&gt;

&lt;p&gt;To specify a &lt;a href=&#34;https://docs.mongodb.org/manual/core/2dsphere/&#34;&gt;2dsphere&lt;/a&gt;
index key, use one of the &lt;code&gt;geo2dsphere&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;This example specifies a 2dsphere index on the &lt;code&gt;location&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var create2dSphereIndex = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { location : &#34;2dsphere&#34; }, function(err, result) {
    console.log(result);
    callback(result);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-2d-index&#34;&gt;Create a &lt;code&gt;2d&lt;/code&gt; Index&lt;/h3&gt;

&lt;p&gt;To specify a &lt;a href=&#34;https://docs.mongodb.org/manual/core/2d/&#34;&gt;2d&lt;/a&gt; index key, use the &lt;code&gt;geo2d&lt;/code&gt;
method.&lt;/p&gt;

&lt;p&gt;.. important::&lt;/p&gt;

&lt;p&gt;A 2d index is for data stored as points on a two-dimensional plane
   and is intended for legacy coordinate pairs used in MongoDB 2.2 and
   earlier.&lt;/p&gt;

&lt;p&gt;This example specifies a 2d index on the &lt;code&gt;points&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var create2dIndex = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { points : &amp;quot;2d&amp;quot; }, function(err, result) {
    console.log(result);
    callback(result);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;indexoptions&#34;&gt;IndexOptions&lt;/h2&gt;

&lt;p&gt;In addition to the index specification document, &lt;code&gt;createIndex&lt;/code&gt;
method can take an index options document, such as to create unique
indexes or partial indexes.&lt;/p&gt;

&lt;h3 id=&#34;create-a-unique-index&#34;&gt;Create a Unique Index&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var createUniqueIndex = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { lastName : -1, dateOfBirth : 1 },
    { unique:true },
    function(err, result) {
      console.log(result);
      callback(result);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-partial-index&#34;&gt;Create a Partial Index&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var createPartialIndex = function(db, callback) {
  // Get the documents collection
  var collection = db.collection(&#39;users&#39;);
  // Create the index
  collection.createIndex(
    { lastName : 1, firstName: 1 },
    { partialFilterExpression: { points: { $gt: 5 } } },
    function(err, result) {
       console.log(result);
       callback(result);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For other index options, see &lt;a href=&#34;https://docs.mongodb.org/manual/core/index-properties/&#34;&gt;Index Options&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>/node-mongodb-native/2.2/tutorials/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/</guid>
      <description>

&lt;h1 id=&#34;tutorials&#34;&gt;Tutorials&lt;/h1&gt;

&lt;p&gt;The tutorials in this section provide examples of some frequently used operations. This section is not meant to be an exhaustive list of all operations available in the Node.js driver.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/connect/&#34;&gt;Connect to MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/collections/&#34;&gt;Collections&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/create-indexes/&#34;&gt;Create Indexes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/crud/&#34;&gt;CRUD Operations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/projections/&#34;&gt;Projections&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/aggregation/&#34;&gt;Aggregation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/text-search/&#34;&gt;Text Search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/geospatial-search/&#34;&gt;Geospatial Search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/commands/&#34;&gt;Database Commands&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/node-mongodb-native/2.2/node-mongodb-native/2.2/tutorials/gridfs/&#34;&gt;GridFS&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>